---
import type { CollectionEntry } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Pagination from "@components/Pagination.astro";
import Card from "@components/Card";
import { SITE } from "@config";
import type Page from "@interfaces/Page";
import {
  BlocksRenderer,
  type BlocksContent,
} from "@strapi/blocks-react-renderer";
import HeroImage from "@components/HeroImage.astro";
import Hr from "@components/Hr.astro";
import { markketplace } from "@config";

export interface Props {
  currentPage: number;
  totalPages: number;
  paginatedPosts: CollectionEntry<"posts">[];
}

import { getCollection } from "astro:content";
import type Store from "../interfaces/Store";
import { slugifyStr } from "@utils/slugify";

const stores = await getCollection("stores");
const store = stores.find(
  (store: Store) => store.data.slug === markketplace.STORE_SLUG
);

const { currentPage, totalPages, paginatedPosts } = Astro.props;

const pages = await getCollection("pages");
const blogPage: { data: Page } | undefined = pages.find(
  (page: { data: Page }) => page.data.slug === "blog"
);
---

<Layout
  title={`Posts | ${SITE.title}`}
  meta={{
    title: blogPage?.data?.SEO?.metaTitle || "Blog",
    image: blogPage?.data?.SEO?.socialImage?.url || "",
    description: blogPage?.data?.SEO?.metaDescription || "",
  }}
>
  <Header activeNav="blog" store={store} />
  <section id="about" class="mb-10 max-w-3xl prose-img:border-0">
    {
      blogPage?.data?.SEO?.socialImage && (
        <HeroImage
          image={blogPage?.data?.SEO?.socialImage}
          title={blogPage?.data?.Title}
        />
      )
    }
    <h1 class="text-2xl tracking-wider sm:text-3xl">
      {blogPage?.data?.Title}
    </h1>
  </section>

  <section class="">
    <BlocksRenderer
      content={blogPage?.data?.Content || ([] as BlocksContent[])}
    />
  </section>
  <Hr />
  <Main
    pageTitle={blogPage?.data?.SEO?.metaTitle || "Articles"}
    pageDesc={blogPage?.data?.SEO?.metaDescription || "Articles"}
  >
    <ul class="blog-list">
      {
        paginatedPosts.map(({ data }) => (
          <Card
            href={`/blog/${new Date(data.updatedAt).getFullYear()}-${slugifyStr(data.Title)}`}
            tags={data.Tags.map((tag: { Label: string }) => tag.Label)}
            image={data?.cover || data.SEO?.metaImage}
            frontmatter={{
              author: "x",
              title: data.Title || data.SEO?.metaTitle || "",
              pubDatetime: new Date(data.createdAt),
              modDatetime: new Date(data.updatedAt),
              description: data.SEO?.metaDescription || "",
              SEO: { ...data.SEO },
            }}
          />
        ))
      }
    </ul>
  </Main>

  <Pagination
    {currentPage}
    {totalPages}
    prevUrl={`/blog${currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""}/`}
    nextUrl={`/blog/${currentPage + 1}/`}
  />

  <Footer noMarginTop={totalPages > 1} activeNav="x" />
</Layout>
