---
import { LOCALE, SITE, markketplace } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";
import { getCollection, type CollectionEntry } from "astro:content";
import Posthog from "@components/posthog.astro";
import type Store from "@interfaces/Store";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  profile?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDatetime?: Date;
  modDatetime?: Date | null;
  scrollSmooth?: boolean;
  post?: CollectionEntry<"posts">;
  meta?: {
    title?: string;
    image?: string;
    description?: string;
    url?: string;
  };
}

const stores = await getCollection("stores");
const store: Store = stores.find(
  store => store.data.slug == markketplace.STORE_SLUG
)?.data as any as Store;

const baseUrl = store?.URLS?.[0]?.URL || Astro.site;

const {
  title = SITE.title,
  author = SITE.author,
  profile = SITE.profile,
  description = Astro.props.description ?? SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, baseUrl).href,
  pubDatetime,
  modDatetime,
  post,
  scrollSmooth = false,
  meta,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin
).href;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: `${title}`,
  image: `${socialImageURL}`,
  datePublished: `${pubDatetime?.toISOString()}`,
  ...(modDatetime && { dateModified: modDatetime.toISOString() }),
  author: [
    {
      "@type": "Person",
      name: `${author}`,
      url: `${profile}`,
    },
  ],
};

let href = new URL(Astro.url.pathname, Astro.site);
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      type="image/png"
      href={`${store?.Favicon?.url || "/favicon.png"}`}
    />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>
      {
        meta?.title ||
          post?.data?.SEO?.metaTitle ||
          store?.SEO?.metaTitle ||
          store?.title ||
          title
      }
    </title>

    <meta
      name="description"
      content={meta?.description ||
        post?.data?.SEO?.metaDescription ||
        store?.SEO?.metaDescription ||
        store?.Description ||
        description}
    />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta
      property="og:title"
      content={meta?.title ||
        post?.data?.SEO?.metaTitle ||
        store?.SEO?.metaTitle ||
        store?.title ||
        title}
    />
    <meta
      property="og:description"
      content={meta?.description ||
        post?.data?.SEO?.metaDescription ||
        store?.SEO?.metaDescription ||
        store?.Description ||
        description}
    />
    <meta
      property="og:url"
      content={href ||
        meta?.url ||
        post?.data?.SEO?.metaUrl ||
        store?.SEO?.metaUrl ||
        canonicalURL}
    />
    <meta
      property="og:image"
      content={meta?.image ||
        post?.data?.SEO?.socialImage?.url ||
        store?.SEO?.socialImage?.url ||
        socialImageURL}
    />

    <!-- Article Published/Modified time -->
    {
      pubDatetime && (
        <meta
          property="article:published_time"
          content={pubDatetime.toISOString()}
        />
      )
    }
    {
      modDatetime && (
        <meta
          property="article:modified_time"
          content={modDatetime.toISOString()}
        />
      )
    }

    <!-- Google JSON-LD Structured data -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <!-- Google Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,400;0,500;0,600;0,700;1,400;1,600&display=swap"
      rel="stylesheet"
    />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ViewTransitions />

    <Posthog />
    <style
      define:vars={{
        primary: markketplace?.colors?.primary,
        accent: markketplace?.colors?.accent || "#c7009c",
      }}
    >
      :root {
        --color-primary: var(--primary);
        --color-accent: var(--accent);
      }
    </style>
    <script is:inline src="/toggle-theme.js"></script>
  </head>
  <body>
    <slot />
  </body>
</html>
