---
import type { CollectionEntry } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Main from "@layouts/Main.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { markketplace } from "@config";
import HeroImage from "@components/HeroImage.astro";
import CheckoutModal from "@components/checkout/CheckoutModal";

import { marked } from "marked";

import { getCollection } from "astro:content";
import type Store from "@interfaces/Store";
import { slugifyStr } from "@utils/slugify";
import type Product from "@interfaces/Product";
import Hr from "@components/Hr.astro";

export interface Props {
  currentPage: number;
  totalPages: number;
  stores: CollectionEntry<"stores">[];
  product?: { data: Product };
}

export async function getStaticPaths() {
  const products = await getCollection("products");

  const productsResult = products.map((product: { data: Product }) => ({
    params: {
      slug: `${product.data.slug || slugifyStr(product.data.Name)}`,
    },
    props: { product },
  })) as { params: { slug: string }; props: { product: Product } }[];

  return [...productsResult];
}

const { product } = Astro.props;

const stores = await getCollection("stores");
const store = stores.find(
  (store: { data: Store }) => store.data.slug == markketplace.STORE_SLUG
);

const htmlDescription = marked.parse(product?.data?.Description || "");
const prices = product?.data?.PRICES || [];

const selectedImage =
  product?.data?.Thumbnail ||
  product?.data?.Slides?.[0] ||
  product?.data?.SEO?.socialImage ||
  {};
---

<script>
  import { ProductSlideshow } from "../../scripts/ui.product";
  document.addEventListener("astro:page-load", () => {
    ProductSlideshow();
  });
</script>

<Layout
  title={`${product?.data?.Name} | ${store?.data?.title}`}
  meta={{
    title: product?.data?.SEO?.metaTitle,
    image: product?.data?.Thumbnail?.url,
    description: product?.data?.SEO?.metaDescription,
  }}
>
  <Header store={store} />
  <Main
    pageTitle={product?.data?.Name as string}
    pageDesc={product?.data?.SEO?.metaDescription || "Product Details"}
  />
  <main class="product-page px-4 py-12 sm:px-6 lg:px-8">
    <div class="mx-auto w-full px-6">
      <div class="mb-10 lg:grid lg:grid-cols-2 lg:items-start lg:gap-x-8">
        <div class="flex flex-col">
          <div class="aspect-w-3 aspect-h-4 overflow-hidden rounded-l pr-3">
            <HeroImage
              title={product?.data?.Name as string}
              image={selectedImage}
            />
          </div>
          <div class="mt-10 flex w-full flex-col justify-end">
            {
              product?.data?.Slides?.length > 0 && (
                <div class="">
                  <div class="grid grid-cols-6 gap-2">
                    {product?.data?.Slides?.map((slide: any) => {
                      return (
                        <div class="aspect-w-3 aspect-h-4 overflow-hidden rounded-lg">
                          <img
                            src={slide?.formats?.thumbnail?.url}
                            alt={slide?.alternativeText || ""}
                            data-astro-image={JSON.stringify(
                              slide?.formats?.small
                            )}
                            class="h-full w-full cursor-pointer object-cover object-center transition-opacity hover:opacity-75"
                            aria-description={slide?.caption || ""}
                          />
                        </div>
                      );
                    })}
                  </div>
                </div>
              )
            }
          </div>
        </div>
        <div class="mt-10 px-4 sm:mt-16 sm:px-0 lg:mt-0">
          <h1
            class="text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white"
          >
            {product?.data?.Name}
          </h1>

          {/* Product description */}
          <div class="mt-6">
            <div
              class="space-y-6 text-base text-gray-700 dark:prose-invert dark:text-gray-300"
              set:html={htmlDescription}
            />
          </div>
        </div>
      </div>
      <Hr />
      <div class="mt-6 flex justify-center">
        <CheckoutModal client:load prices={prices} product={product} />
      </div>
      <!-- <div class="w-full mt-8">
        <form
          data-product-price={product?.data.id}
          data-product-json={JSON.stringify(product?.data)}
        >
          <div class="flex items-center justify-between">
            <h1 class="text-2xl font-medium text-gray-900 dark:text-white">
              Available Options
            </h1>
            <span class="text-sm text-gray-500">
              Select your preferred option
            </span>
          </div>
          <div class="m-4">
            <label for="price"><strong>Price Options</strong></label>
            <select
              id="price"
              name="price"
              data-input="product.prices"
              class="block w-full rounded-md border-2 border-solid border-gray-300 py-2 pl-3 pr-10 text-base focus:border-accent-500 focus:outline-none focus:ring-accent-500 dark:border-gray-600 dark:bg-gray-700"
            >
              <option value=""></option>
              {
                prices.map((price: any) => (
                  <option
                    value={price.STRIPE_ID}
                    data-price-data={JSON.stringify(price)}
                  >
                    {price.Name.replace(/_/gi, " ")} - ${price.Price}{" "}
                    {price.Currency}
                  </option>
                ))
              }
            </select>
            <p class="">
              <em data-output="product.price.description"></em>
            </p>
          </div>
          <div class="m-4">
            <label for="quantity"><strong>Quantity</strong></label>
            <input
              type="number"
              id="quantity"
              value="1"
              data-input="quantity"
              class="w-full rounded-md border-2 border-solid border-gray-300 py-2 pl-3 pr-10 text-base focus:border-accent-500 focus:outline-none focus:ring-accent-500 dark:border-gray-600 dark:bg-gray-700"
              style={{
                // border: "1px solid #6b7280",
              }}
            />
          </div>
          <div class="m-4">
            <p>For tips, or custom price products, enter the number here</p>
            <label for="custom-price"><strong>Custom Price</strong></label>
            <input
              data-input="custom-price"
              type="number"
              placeholder="0"
              name="custom-price"
              id="custom-price"
              class="w-full rounded-md border-2 border-solid border-gray-300 py-2 pl-3 pr-10 text-base focus:border-accent-500 focus:outline-none focus:ring-accent-500 dark:border-gray-600 dark:bg-gray-700"
              style={{
                // border: "1px solid #6b7280",
              }}
            />
          </div>
          <div class="m-4">
            <label for="total"><strong>Total</strong></label>
            <p class="text-4xl">$<span data-output="total">0</span></p>
          </div>
        </form>
      </div> -->
      <div class="m-4">
        <!-- <button
          disabled
          data-action-button="submit"
          type="submit"
          class="flex w-full items-center justify-center rounded-md border border-transparent bg-sky-500 px-8 py-3 text-base font-medium text-white hover:bg-accent-700 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
        >
          Continue to Payment
        </button> -->
        <ol class="mt-4 text-sm text-gray-500">
          <li class="mb-2">
            We use Stripe to collect payments, and send payouts to the artists
          </li>
          <li class="mb-2">
            Currently we don't support a shopping cart, you can get one or
            multiple units of the same
            <em>Price</em> per transaction
          </li>
          <li class="mb-2">
            We notify the artist after a succesful transaction and forward your
            shipping details and email to them
          </li>
          <li class="mb-2">
            The artists will reach out with tracking details, or follow up steps
            to complete the transaction
          </li>
        </ol>
      </div>
    </div>
  </main>
  <Footer />
</Layout>
