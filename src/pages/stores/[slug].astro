---
import type { CollectionEntry } from "astro:content";
import Main from "@layouts/Main.astro";
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
// import Pagination from "@components/Pagination.astro";
import HeroImage from "@components/HeroImage.astro";
import Hr from "@components/Hr.astro";
import LinkButton from "@components/LinkButton.astro";

import { getCollection } from "astro:content";
import type Store from "@interfaces/Store";
import { slugifyStr } from "@utils/slugify";

export interface Props {
  currentPage: number;
  totalPages: number;
  stores: CollectionEntry<"stores">[];
}

export async function getStaticPaths() {
  const stores: { data: Store }[] = (await getCollection("stores")) as any;

  const storesResult = stores.map((store: { data: Store }) => ({
    params: {
      slug: `${store?.data?.slug || slugifyStr(store.data.title)}`,
    },
    props: { store },
  }));

  return [...storesResult];
}

const { totalPages } = Astro.props;

const { slug } = Astro.params;

const stores = await getCollection("stores");
const store: { data: Store } = stores.find(
  (store: { data: Store }) => store?.data?.slug == slug
) as any;
---

<Layout
  title={`Store | ${store?.data?.title}`}
  author={store?.data?.SEO?.metaAuthor || "Markkët"}
  meta={{
    title: `Markkët Store | ${store?.data?.title}`,
    description: store?.data?.SEO?.metaDescription || store?.data?.Description,
    url: `/stores/${store?.data?.slug}`,
    image: store?.data?.SEO?.socialImage?.formats?.medium?.url,
  }}
>
  <Header activeNav="pages" store={store} />
  <Main pageTitle={store?.data?.title} pageDesc={`Store `}>
    <main id="main-content">
      <section id="about" class="mb-10 prose-img:border-0 flex flex-col lg:flex-row">
          <div class="lg:w-1/2 w-full">
            {
              store?.data?.SEO?.socialImage && (
                <HeroImage
                  image={store?.data?.SEO?.socialImage?.formats?.medium}
                  title={store?.data?.title}
                />
              )
            }
          </div>
          <section class="mt-4 lg:mt-0 lg:w-1/2 w-full">
            {
              store?.data.Description?.split("\n").map(desc => (
                <p class="mb-5">{desc}</p>
              ))
            }
          </section>
      </section>
      <Hr />
      <h2 class="brand-yellow mt-2 text-2xl tracking-wider sm:text-3xl">
        Urls
      </h2>
      <div class="all-posts-btn-wrapper">
        {
          store?.data?.URLS.map(url => {
            if (url.URL && url.Label)
              return (
                <p class="mb-5 mt-2">
                  <LinkButton target="_blank" href={url.URL}>
                    {url.Label}
                    <svg xmlns="http://www.w3.org/2000/svg">
                      <path d="m11.293 17.293 1.414 1.414L19.414 12l-6.707-6.707-1.414 1.414L15.586 11H6v2h9.586z" />
                    </svg>
                  </LinkButton>
                </p>
              );
          })
        }
      </div>
      <!-- <Hr /> -->
      <!-- {store.slides} -->
  </main>

    <!-- <Pagination
      {currentPage}
      {totalPages}
      prevUrl={`/blog${currentPage - 1 !== 1 ? "/" + (currentPage - 1) : ""}/`}
      nextUrl={`/blog/${currentPage + 1}/`}
    /> -->

    <Footer noMarginTop={totalPages > 1} activeNav="stores" />
  </Main>
</Layout>
