---
import { SITE } from "@config";
import Hr from "./Hr.astro";
import LinkButton from "./LinkButton.astro";
import type Store from "../interfaces/Store";
import { IconMenu4, IconX, IconSearch } from "@tabler/icons-react";

export type nav = "tags" | "about" | "search" | "pages" | "blog" | "products";

export interface Props {
  activeNav?: nav;
  store?: {
    data: Store;
  };
  products?: any;
}

const { activeNav, store, products } = Astro.props;
---

<header class="bg-skin-card dark:bg-skin-fill">
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="nav-container">
    <div class="top-nav-wrap">
      <nav id="nav-menu" class="absolute sm:relative">
        <ul id="menu-items" class="display-none lg:flex">
          <li>
            <a href="/blog/" class={activeNav === "blog" ? "active" : ""}>
              Blog
            </a>
          </li>
          {
            products?.length > 0 && (
              <li>
                <a
                  href="/products/"
                  class={activeNav === "products" ? "active" : ""}
                >
                  Products
                </a>
              </li>
            )
          }
          <li>
            <a href="/tags/" class={activeNav === "tags" ? "active" : ""}>
              Tags
            </a>
          </li>
          <li>
            <a href="/about/" class={activeNav === "about" ? "active" : ""}>
              About
            </a>
          </li>
        </ul>
        <button
          class="hamburger-menu focus-outline absolute left-4 sm:relative sm:left-0 sm:right-0"
          style={{ marginLeft: "0px !important" }}
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconMenu4 color="#ff00cf" size={42} />
        </button>
      </nav>
      <a href="/" class="logo brand-magenta whitespace-nowrap">
        {
          store?.data?.Logo?.url ? (
            <img
              src={`${store?.data?.Logo.url}`}
              alt={store?.data?.title || store?.data?.SEO?.metaTitle}
              width={120}
            />
          ) : (
            store?.data?.title || store?.data?.SEO?.metaTitle
          )
        }
      </a>

      <nav id="nav-menu" class="sm:justify-end">
        <ui id="menu-items" class="display-none ml-6 list-none gap-x-8 sm:flex">
          <li>
            <LinkButton
              href="/search/"
              className={`focus-outline p-3 sm:p-1 ${
                activeNav === "search" ? "active" : ""
              } flex`}
              ariaLabel="search"
              title="Search"
            >
              <IconSearch size={42} />
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>
          {
            SITE.lightAndDarkMode && (
              <li>
                <button
                  id="theme-btn"
                  class="focus-outline"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" id="moon-svg">
                    <path d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z" />
                  </svg>
                  <svg xmlns="http://www.w3.org/2000/svg" id="sun-svg">
                    <path d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z" />
                  </svg>
                </button>
              </li>
            )
          }
        </ui>
      </nav>
    </div>
  </div>
  <div id="side-panel" class="fixed top-0 left-0 h-full w-[300px] dark:bg-skin-fill bg-gray-200 opacity-90 text-white shadow-lg transform -translate-x-full transition-transform duration-300 ease-in-out z-[1000] flex">
    <div class="p-5 flex flex-col h-full">
      <button
        id="close-panel-btn"
        class="absolute right-2.5 top-3.5 cursor-pointer border-none bg-none text-2xl text-white"
        aria-label="Close Menu"
        title="Close Menu"
        onclick="toggleNav()"
      >
        <IconX color="#ff00cf" size={42} />
      </button>
      <h1>Menu</h1>
      <ul class="list-none p-0 mt-5 space-y-4">
        <li>
          <a href="/blog/" class="text-[#ff00cf] text-lg transition-colors duration-300 hover:text-sky-400">Blog</a>
        </li>
        <li>
          <a href="/products/" class="text-[#ff00cf] text-lg transition-colors duration-300 hover:text-sky-400">Products</a>
        </li>
        <li>
          <a href="/tags/" class="text-[#ff00cf] text-lg transition-colors duration-300 hover:text-sky-400">Tags</a>
        </li>
        <li>
          <a href="/about/" class="text-[#ff00cf] text-lg transition-colors duration-300 hover:text-sky-400">About</a>
        </li>
      </ul>
    </div>
  </div>
  <Hr />
</header>

<style>
  /* Panel Styles */

  #skip-to-content {
    @apply absolute -top-full left-16 z-50 bg-skin-accent px-3 py-2 text-skin-inverted transition-all focus:top-4;
  }
  .nav-container {
    @apply mx-auto flex min-h-[90px] w-full flex-col items-center justify-between sm:flex-row md:min-h-[120px];
  }
  .top-nav-wrap {
    @apply relative flex w-full items-start justify-between sm:items-center;
  }
  .logo {
    @apply absolute right-4 ml-[20px] mt-[5px] w-[200px] py-1 text-xl font-semibold sm:static sm:left-0 sm:ml-0 sm:mt-0 sm:text-2xl;
  }
  .hamburger-menu {
    @apply mt-[20px] self-end p-2 sm:mt-0 lg:hidden;
  }
  .hamburger-menu svg {
    @apply h-6 w-6 scale-125 fill-skin-base;
  }

  nav {
    @apply flex w-full flex-col items-center px-3 sm:flex-row sm:justify-start sm:space-x-4 sm:py-0 sm:pr-6;
  }
  nav ul {
    @apply mt-4 grid w-44 grid-cols-2 grid-rows-2 gap-x-4 gap-y-2 sm:ml-0 sm:mt-0 sm:w-auto sm:gap-y-0;
  }
  nav ul li {
    @apply col-span-2 flex items-center justify-center;
  }
  nav ul li a {
    @apply w-full px-4 py-3 text-center font-medium hover:text-skin-accent sm:my-0 sm:px-2 sm:py-1;
  }
  nav ul li:nth-last-child(2) a {
    @apply w-auto;
  }
  nav ul li:nth-last-child(1),
  nav ul li:nth-last-child(2) {
    @apply col-span-1;
  }
  nav a.active {
    @apply underline decoration-wavy decoration-2 underline-offset-4;
  }
  nav a.active svg {
    @apply fill-skin-accent;
  }

  nav button {
    @apply p-1;
  }
  nav button svg {
    @apply h-6 w-6 fill-skin-base hover:fill-skin-accent;
  }
  #theme-btn {
    @apply p-3 sm:p-1;
  }
  #theme-btn svg {
    @apply scale-125 hover:rotate-12 sm:scale-100;
  }

  .menu-icon line {
    @apply transition-opacity duration-75 ease-in-out;
  }
  .menu-icon .close {
    opacity: 0;
  }
  .menu-icon.is-active .line {
    @apply opacity-0;
  }
  .menu-icon.is-active .close {
    @apply opacity-100;
  }
</style>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector(".hamburger-menu");
    const menuIcon = document.querySelector(".menu-icon");
    const sidePanel = document.querySelector("#side-panel");
    const closePanelBtn = document.querySelector("#close-panel-btn");

    if (!menuBtn || !sidePanel) {
      console.error("Required elements not found");
      return;
    }

    // Function to toggle the side panel visibility
    const togglePanel = () => {
      const isExpanded = menuBtn.getAttribute("aria-expanded") === "true";
      menuBtn.setAttribute("aria-expanded", !isExpanded ? "true" : "false");
      menuBtn.setAttribute(
        "aria-label",
        isExpanded ? "Open Menu" : "Close Menu"
      );
      sidePanel.classList.toggle("translate-x-0");
      sidePanel.classList.toggle("-translate-x-full");
      menuIcon?.classList.toggle("is-active");
    };

    // Function to close the side panel
    const closePanel = () => {
      menuBtn.setAttribute("aria-expanded", "false");
      menuBtn.setAttribute("aria-label", "Open Menu");
      sidePanel.classList.remove("translate-x-0");
      sidePanel.classList.add("-translate-x-full");
      menuIcon?.classList.remove("is-active");
    };

    // Attach event listeners
    menuBtn.addEventListener("click", togglePanel);
    closePanelBtn?.addEventListener("click", closePanel);

    // Close the side panel on outside click
    document.addEventListener("click", e => {
      if (
        e.target &&
        !sidePanel.contains(e.target as Node) &&
        !menuBtn.contains(e.target as Node)
      ) {
        closePanel();
      }
    });

    // Close the side panel on escape key press
    document.addEventListener("keydown", e => {
      if (e.key === "Escape") {
        closePanel();
      }
    });
  }

  // Initialize the toggleNav function
  toggleNav();

  // Reinitialize after dynamic navigation swaps (for frameworks like Astro)
  document.addEventListener("astro:after-swap", toggleNav);
</script>
